#EMEL CELEDONIO

service: starwars
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x

# region
  stage: dev
  region: us-east-1

  apiGateway:
    shouldStartNameWithService: true


plugins:
  - serverless-offline
  - serverless-plugin-typescript
  - serverless-dynamodb-local


#         first function
functions:
  hello:
    handler: handler.hello
    events:
      - httpApi:
          path: /hello
          method: get
#   create function
  addPeople:
      handler: src/handlers/addPeople.addPeople
      events:
        - httpApi:
            path: /addpeople
            method: post
#   list
  listpeople:
    handler: src/handlers/listPeople.listpeople
    events:
      - httpApi:
          path: /listpeople
          method: get
#   getbyid
  getPeople:
    handler: src/handlers/getPeople.getPeople
    events:
      - httpApi:
          path: /people/{nombre}
          method: get
#   update
  updatePeople:
    handler: src/handlers/updatePeople.updatePeople
    events:
      - httpApi:
          path: /people/{id}
          method: put
#   delete
  deletePeople:
    handler: src/handlers/deletePeople.deletePeople
    events:
      - httpApi:
          path: /people/{id}
          method: delete
#
resources:
  Resources:
    peopleTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: peopleTable
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: nombre
            AttributeType: S
          - AttributeName: estatura
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: nombre
            KeyType: HASH
          - AttributeName: estatura
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
